@extends('layouts.app')

@section('content')
<div class="flex-1 p-4 md:p-8 transition-all duration-300" id="mainContent">
    @if(session('success'))
    <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-xl text-green-700 flex items-center" role="alert">
        <svg class="w-5 h-5 mr-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div>
            <div class="font-semibold">Success!</div>
            <div>{{ session('success') }}</div>
        </div>
    </div>
    @endif

    @if(session('error'))
    <div class="mb-6 p-4 bg-red-50 border border-red-200 rounded-xl text-red-700 flex items-center" role="alert">
        <svg class="w-5 h-5 mr-3 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
        <div>
            <div class="font-semibold">Error!</div>
            <div>{{ session('error') }}</div>
        </div>
    </div>
    @endif

    <!-- Page Header with Background Design -->
    <div class="mb-6 md:mb-8">
        <div class="bg-red-800 rounded-xl shadow-lg p-4 md:p-6 text-white">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <div class="bg-white/20 p-3 md:p-4 rounded-full backdrop-blur-sm mr-3 md:mr-4">
                        <svg class="w-8 h-8 md:w-10 md:h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-2xl md:text-3xl font-bold text-white mb-1 md:mb-2">Repair Request Details</h1>
                        <p class="text-red-100 text-sm md:text-lg">View comprehensive information about this repair request</p>
                    </div>
                </div>
                <div class="space-x-3">
                    <a href="{{ route('repair.completed') }}" class="text-sm px-4 py-2 bg-white/20 text-white rounded-lg hover:bg-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 focus:ring-offset-2 focus:ring-offset-red-800 transition-all duration-200">
                        Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Container -->
    <div class="bg-white rounded-xl shadow-lg p-4 md:p-6">
        <!-- Tabs Navigation (will be populated dynamically) -->
        <div id="repairTabsNav" class="border-b border-gray-200 mb-6">
            <!-- Loading State -->
            <div class="text-center py-12">
                <div class="animate-spin rounded-full h-16 w-16 border-b-4 border-t-4 border-red-600 mx-auto"></div>
                <p class="mt-6 text-gray-600 font-medium">Loading repair details...</p>
            </div>
        </div>
        
        <!-- Tab Content (will be populated dynamically) -->
        <div id="repairTabsContent" class="space-y-4">
        </div>
    </div>
</div>

<!-- Template for repair details -->
<template id="repairDetailsTemplate">
    <div class="mb-6">
        <div class="flex items-center justify-between">
            <div class="flex items-center">
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium status-badge">
                    <span class="status-icon"></span>
                    <span class="status-text"></span>
                </span>
                <!-- Urgency Level Badge -->
                <span class="urgency-level-badge ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold whitespace-nowrap">
                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                    <span class="urgency-text">Level 3</span>
                </span>
            </div>
            <div class="text-xs text-gray-500">
                <span class="created-date block"></span>
                <span class="updated-date block"></span>
            </div>
        </div>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="space-y-6">
            <!-- Basic Information -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                        </svg>
                    </div>
                    Basic Information
                </h3>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <p class="text-xs font-medium text-gray-500 uppercase tracking-wide">Caller's Name</p>
                            <p class="caller-name text-gray-900 text-sm font-semibold mt-2"></p>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <p class="text-xs font-medium text-gray-500 uppercase tracking-wide">Location</p>
                            <p class="location text-gray-900 text-sm font-semibold mt-2">
                                <!-- Original caller's location will be populated by JavaScript -->
                            </p>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <p class="text-xs font-medium text-gray-500 uppercase tracking-wide">Urgency Level</p>
                            <p class="urgency-level-info text-gray-900 text-sm font-semibold mt-2"></p>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <p class="text-xs font-medium text-gray-500 uppercase tracking-wide">Ongoing Activity</p>
                            <p class="ongoing-activity text-gray-900 text-sm font-semibold mt-2"></p>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <p class="text-xs font-medium text-gray-500 uppercase tracking-wide">Equipment</p>
                            <p class="equipment text-gray-900 text-sm font-semibold mt-2"></p>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <p class="text-xs font-medium text-gray-500 uppercase tracking-wide">Serial Number</p>
                            <p class="serial-number text-gray-900 text-sm font-semibold mt-2"></p>
                        </div>
                    </div>
                    <!-- Current Location (only shown when asset is linked) -->
                    <div class="current-location-container hidden">
                        <div class="bg-green-50 p-4 rounded-lg border border-green-200">
                            <p class="text-xs font-medium text-green-600 uppercase tracking-wide">Current Location (Asset)</p>
                            <p class="current-location text-green-800 text-sm font-semibold mt-2">
                                <!-- Asset's current location will be populated by JavaScript -->
                            </p>
                        </div>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-lg register-asset-container hidden">
                        <p class="text-xs font-medium text-gray-500 uppercase tracking-wide mb-3">Asset Registration</p>
                        <a href="#" class="register-asset-btn inline-flex items-center px-4 py-2 bg-red-800 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            Register & Link Asset
                        </a>
                    </div>
                </div>
            </div>

            <!-- Reported Issue -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    Reported Issue
                </h3>
                <div class="bg-gray-50 p-4 rounded-lg">
                    <p class="issue text-gray-900 text-sm whitespace-pre-wrap"></p>
                </div>
            </div>

            <!-- Signatures -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                        </svg>
                    </div>
                    Signatures
                </h3>
                <!-- Signature meta information -->
                <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
                    <div class="bg-gray-50 border border-gray-200 rounded-md p-3">
                        <p class="text-gray-500 font-medium">Verification Status</p>
                        <p class="verification-status font-semibold mt-1"></p>
                    </div>
                    <div class="bg-gray-50 border border-gray-200 rounded-md p-3">
                        <p class="text-gray-500 font-medium">Signature Type</p>
                        <p class="signature-type font-semibold mt-1"></p>
                    </div>
                    <div class="bg-gray-50 border border-gray-200 rounded-md p-3 signature-extra hidden">
                        <p class="text-gray-500 font-medium signature-extra-label"></p>
                        <p class="signature-extra-value font-semibold mt-1"></p>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <p class="text-sm font-medium text-gray-700 mb-3">Technician's Signature</p>
                        <div class="technician-signature-container">
                            <!-- Technician signature will be inserted here -->
                        </div>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-700 mb-3">Caller's Signature</p>
                        <div class="caller-signature-container">
                            <!-- Caller signature will be inserted here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Technician Evaluation -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                        </svg>
                    </div>
                    Technician Evaluation
                </h3>
                <div class="evaluation-container">
                    <!-- Evaluation will be inserted here -->
                </div>
            </div>

            <!-- Repair History -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    Repair History
                </h3>
                <div class="repair-history-container">
                    <!-- Repair history will be inserted here -->
                </div>
            </div>
        </div>

        <div class="space-y-6">
            <!-- Findings -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2m-9 4h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                        </svg>
                    </div>
                    Findings
                </h3>
                <div class="bg-gray-50 p-4 rounded-lg">
                    <p class="findings text-gray-900 text-sm whitespace-pre-wrap"></p>
                </div>
            </div>

            <!-- Remarks -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                        </svg>
                    </div>
                    Remarks
                </h3>
                <div class="bg-gray-50 p-4 rounded-lg">
                    <p class="remarks text-gray-900 text-sm whitespace-pre-wrap"></p>
                </div>
            </div>

            <!-- Repair Photo -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                    </div>
                    Repair Photo
                </h3>
                <div class="bg-gray-50 p-4 rounded-lg">
                    <div class="photo-container">
                        <!-- Photo will be inserted here -->
                    </div>
                </div>
            </div>

            <!-- Photo Evidence (Before/After) -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                        </svg>
                    </div>
                    Photo Evidence
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <p class="text-sm font-medium text-gray-700 mb-2">Before Photos</p>
                        <div class="before-photos-container grid grid-cols-2 gap-3"></div>
                        <p class="before-empty text-xs text-gray-500 hidden">No before photos uploaded</p>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-700 mb-2">After Photos</p>
                        <div class="after-photos-container grid grid-cols-2 gap-3"></div>
                        <p class="after-empty text-xs text-gray-500 hidden">No after photos uploaded</p>
                    </div>
                </div>
            </div>

            <!-- Repair Timeline -->
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <div class="bg-red-100 p-2 rounded-lg mr-3">
                        <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    Repair Timeline
                </h3>
                <div class="relative pl-8 space-y-6 before:absolute before:left-4 before:top-0 before:bottom-0 before:w-0.5 before:bg-gray-200">
                    <div class="timeline-container">
                        <!-- Timeline items will be inserted here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<!-- Image Modal -->
<div id="imageModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-[60] flex items-center justify-center">
    <div class="relative" onclick="event.stopPropagation();">
        <img id="modalImage" src="" alt="Enlarged Image" class="max-h-[80vh] max-w-[80vw] object-contain">
        <button onclick="closeImageModal()" class="absolute -top-4 -right-4 bg-white rounded-full p-2 shadow-lg hover:bg-gray-100 transition-colors">
            <svg class="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
    </div>
</div>

<script>
    function formatStatus(status) {
        if (!status) return 'Unknown';
        const statusMap = {
            'pulled_out': 'Pulled Out',
            'in_progress': 'In Progress',
            'completed': 'Completed',
            'cancelled': 'Cancelled',
            'pending': 'Pending'
        };
        return statusMap[status] || status.split('_')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
    }

    function getStatusColor(status) {
        switch (status) {
            case 'cancelled':
                return 'bg-red-100 text-red-800 border border-red-200';
            case 'pulled_out':
                return 'bg-yellow-100 text-yellow-800 border border-yellow-200';
            case 'completed':
                return 'bg-green-100 text-green-800 border border-green-200';
            case 'in_progress':
                return 'bg-blue-100 text-blue-800 border border-blue-200';
            case 'pending':
                return 'bg-purple-100 text-purple-800 border border-purple-200';
            default:
                return 'bg-gray-100 text-gray-800 border border-gray-200';
        }
    }

    function getStatusIcon(status) {
        switch (status) {
            case 'cancelled':
                return '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>';
            case 'pulled_out':
                return '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>';
            case 'completed':
                return '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>';
            case 'in_progress':
                return '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" /></svg>';
            case 'pending':
                return '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>';
            default:
                return '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>';
        }
    }

    function getUrgencyLevelColor(urgencyLevel) {
        switch (urgencyLevel) {
            case 1:
                return 'bg-red-100 text-red-800 border border-red-200';
            case 2:
                return 'bg-orange-100 text-orange-800 border border-orange-200';
            case 3:
                return 'bg-blue-100 text-blue-800 border border-blue-200';
            default:
                return 'bg-gray-100 text-gray-800 border border-gray-200';
        }
    }

    function formatDate(dateString) {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // Function to switch between repair history tabs
    function switchHistoryTab(event, tabId) {
        // Remove active class from all tabs
        const tabs = document.querySelectorAll('.history-tab');
        tabs.forEach(tab => {
            tab.classList.remove('border-red-600', 'text-red-600');
            tab.classList.add('border-transparent', 'text-gray-500');
        });
        
        // Add active class to clicked tab
        event.currentTarget.classList.remove('border-transparent', 'text-gray-500');
        event.currentTarget.classList.add('border-red-600', 'text-red-600');
        
        // Hide all tab panels
        const panels = document.querySelectorAll('.history-tab-panel');
        panels.forEach(panel => {
            panel.classList.add('hidden');
        });
        
        // Show selected tab panel
        const selectedPanel = document.getElementById(tabId);
        if (selectedPanel) {
            selectedPanel.classList.remove('hidden');
        }
    }

    // Load repair details when page loads
    document.addEventListener('DOMContentLoaded', function() {
        // Extract ID from URL path
        const pathParts = window.location.pathname.split('/');
        const id = pathParts[pathParts.length - 1];
        console.log('Repair ID:', id);
        if (id) {
            loadRepairDetails(id);
        }
    });

    function loadRepairDetails(id) {
        const tabsNav = document.getElementById('repairTabsNav');
        const tabsContent = document.getElementById('repairTabsContent');
        const url = `{{ url('/repair-requests') }}/${id}/data`;
        console.log('Fetching from URL:', url);

        // Show loading state
        tabsNav.innerHTML =
            '<div class="text-center py-12">' +
            '<div class="animate-spin rounded-full h-16 w-16 border-b-4 border-t-4 border-red-600 mx-auto"></div>' +
            '<p class="mt-6 text-gray-600 font-medium">Loading repair details...</p>' +
            '</div>';

        // Fetch request details
        fetch(url, {
            headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Received data:', data);
                console.log('Asset data:', data.asset);
                console.log('Creator data:', data.creator);
                console.log('Histories:', data.histories);
                
                if (data) {
                    const request = data;
                    
                    // Build tabs based on repair history
                    if (request.histories && request.histories.length > 0) {
                        // Create tabs for each repair attempt
                        buildRepairTabs(request, tabsNav, tabsContent);
                    } else {
                        // No history yet - show current repair details only
                        buildSingleRepairView(request, tabsNav, tabsContent);
                    }
                    const clone = template.content.cloneNode(true);

                    // Set status badge
                    const statusBadge = clone.querySelector('.status-badge');
                    statusBadge.className = `inline-flex items-center px-4 py-2 rounded-full text-sm font-medium ${getStatusColor(request.status)}`;
                    statusBadge.innerHTML = getStatusIcon(request.status) + formatStatus(request.status);

                    // Set urgency level badge
                    const urgencyLevelBadge = clone.querySelector('.urgency-level-badge');
                    const urgencyText = clone.querySelector('.urgency-text');
                    const urgencyLevel = request.urgency_level || 3;
                    urgencyLevelBadge.className = `urgency-level-badge ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold whitespace-nowrap ${getUrgencyLevelColor(urgencyLevel)}`;
                    urgencyText.textContent = `Level ${urgencyLevel}`;

                    // Set dates
                    clone.querySelector('.created-date').textContent = 'Created: ' + formatDate(request.created_at);
                    clone.querySelector('.updated-date').textContent = 'Last Updated: ' + formatDate(request.updated_at);

                    // Set basic information - use creator's full name if available, otherwise use caller_name
                    let callerName = 'N/A';
                    if (request.creator && request.creator.name) {
                        callerName = request.creator.name;
                    } else if (request.creator && (request.creator.first_name || request.creator.last_name)) {
                        callerName = `${request.creator.first_name || ''} ${request.creator.last_name || ''}`.trim();
                    } else if (request.caller_name) {
                        callerName = request.caller_name;
                    }
                    clone.querySelector('.caller-name').textContent = callerName;
                    
                    // Set original caller's location (always show the repair request location)
                    let originalLocationText = 'N/A';
                    if (request.building && request.floor && request.room) {
                        // Use repair request location with building, floor, and room
                        originalLocationText = `${request.building} - ${request.floor} - ${request.room}`;
                        console.log('Original location (building/floor/room):', originalLocationText);
                    } else if (request.location) {
                        // Use repair request location
                        originalLocationText = request.location;
                        console.log('Original location (direct):', originalLocationText);
                    }
                    clone.querySelector('.location').textContent = originalLocationText;
                    
                    // Set current location (asset location) - only show if asset is linked
                    const currentLocationContainer = clone.querySelector('.current-location-container');
                    console.log('Location debug - Asset exists:', !!request.asset);
                    console.log('Location debug - Asset location object:', request.asset?.location);
                    
                    if (request.asset && request.asset.location && 
                        (request.asset.location.building || request.asset.location.floor || request.asset.location.room_number)) {
                        // Show current location section
                        currentLocationContainer.classList.remove('hidden');
                        
                        // Construct asset's current location
                        const building = request.asset.location.building || '';
                        const floor = request.asset.location.floor || '';
                        const room = request.asset.location.room_number || '';
                        const currentLocationText = [building, floor, room].filter(part => part.trim()).join(' - ');
                        
                        clone.querySelector('.current-location').textContent = currentLocationText;
                        console.log('Current location (asset):', currentLocationText);
                    } else {
                        // Hide current location section if no asset is linked
                        currentLocationContainer.classList.add('hidden');
                        console.log('No asset linked - hiding current location section');
                    }
                    
                    clone.querySelector('.equipment').textContent = request.equipment || 'N/A';
                    clone.querySelector('.serial-number').textContent = request.serial_number || 'N/A';
                    
                    // Set urgency level info
                    const urgencyLevelInfo = clone.querySelector('.urgency-level-info');
                    let urgencyDescription = '';
                    switch (urgencyLevel) {
                        case 1:
                            urgencyDescription = 'Level 1 - Highest (Ongoing Class/Event)';
                            break;
                        case 2:
                            urgencyDescription = 'Level 2 - Medium (Over 1 Week Old)';
                            break;
                        case 3:
                            urgencyDescription = 'Level 3 - Low (New Request)';
                            break;
                        default:
                            urgencyDescription = `Level ${urgencyLevel} - Unknown`;
                    }
                    urgencyLevelInfo.textContent = urgencyDescription;
                    
                    // Set ongoing activity info
                    const ongoingActivity = clone.querySelector('.ongoing-activity');
                    ongoingActivity.textContent = request.ongoing_activity === 'yes' ? 'Yes' : 'No';

                    // Set issue and findings
                    clone.querySelector('.issue').textContent = request.issue || 'No issue recorded';
                    clone.querySelector('.findings').textContent = request.findings || 'No findings recorded';

                    // Set photo
                    const photoContainer = clone.querySelector('.photo-container');
                    if (request.photo) {
                        // Handle different photo path formats
                        let photoPath;
                        if (request.photo.startsWith('http')) {
                            photoPath = request.photo;
                        } else if (request.photo.startsWith('/')) {
                            photoPath = window.location.origin + request.photo;
                        } else {
                            photoPath = window.location.origin + '/storage/' + request.photo;
                        }
                        
                        photoContainer.innerHTML = `
                        <div class="relative group w-full bg-gray-100 p-4 rounded-lg">
                            <img src="${photoPath}"
                                alt="Repair Photo"
                                class="w-full h-auto max-h-[400px] object-contain rounded-lg cursor-pointer hover:opacity-90 transition-opacity"
                                onerror="this.onerror=null; this.parentElement.innerHTML='<div class=\'text-center py-8\'><svg class=\'w-12 h-12 mx-auto text-gray-400\' fill=\'none\' stroke=\'currentColor\' viewBox=\'0 0 24 24\'><path stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'2\' d=\'M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\' /></svg><p class=\'mt-2 text-gray-500\'>Photo not found</p></div>';"
                                onclick="showImageModal('${photoPath}')">
                        </div>
                    `;
                    } else {
                        photoContainer.innerHTML = `
                        <div class="text-center py-8">
                            <svg class="w-12 h-12 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <p class="mt-2 text-gray-500">No photo available</p>
                        </div>
                    `;
                    }

                    // Set timeline
                    const timelineContainer = clone.querySelector('.timeline-container');
                    timelineContainer.innerHTML = `
                    <div class="relative">
                        <div class="absolute left-[-30px] top-0 w-6 h-6 rounded-full bg-blue-100 border-2 border-blue-500 flex items-center justify-center hidden"></div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-xs font-medium text-gray-500">CREATED</p>
                            <p class="text-sm text-gray-900">${formatDate(request.created_at)}</p>
                        </div>
                    </div>
                    ${request.time_started ? `
                        <div class="relative">
                            <div class="absolute left-[-30px] top-0 w-6 h-6 rounded-full bg-yellow-100 border-2 border-yellow-500 flex items-center justify-center hidden"></div>
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <p class="text-xs font-medium text-gray-500">STARTED</p>
                                <p class="text-sm text-gray-900">${formatDate(request.time_started)}</p>
                            </div>
                        </div>
                    ` : ''}
                    ${request.completed_at ? `
                        <div class="relative">
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <p class="text-xs font-medium text-gray-500">COMPLETED</p>
                                <p class="text-sm text-gray-900">${formatDate(request.completed_at)}</p>
                            </div>
                        </div>
                    ` : ''}
                `;

                    // Set remarks
                    clone.querySelector('.remarks').textContent = request.remarks || 'No remarks recorded';

                    // Helper to build image URL from stored path or absolute
                    function buildImageUrl(path) {
                        if (!path) return '';
                        if (path.startsWith('http')) return path;
                        if (path.startsWith('/')) return window.location.origin + path;
                        return window.location.origin + '/storage/' + path;
                    }

                    // Set signatures
                    const techSignatureContainer = clone.querySelector('.technician-signature-container');
                    const callerSignatureContainer = clone.querySelector('.caller-signature-container');

                    if (request.technician_signature) {
                        techSignatureContainer.innerHTML = `
                        <div class="border rounded-lg p-3 bg-gray-50 hover:bg-gray-100 transition-colors duration-200">
                            <img src="${request.technician_signature}" 
                                alt="Technician Signature" 
                                class="w-full h-32 object-contain cursor-pointer hover:opacity-90 transition-opacity"
                                onclick="showImageModal('${request.technician_signature}')">
                        </div>
                    `;
                    } else {
                        techSignatureContainer.innerHTML = `
                        <div class="border rounded-lg p-4 bg-gray-50 text-center">
                            <svg class="w-8 h-8 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <p class="text-gray-500 italic mt-2">No signature provided</p>
                        </div>
                    `;
                    }

                    if (request.caller_signature) {
                        callerSignatureContainer.innerHTML = `
                        <div class="border rounded-lg p-3 bg-gray-50 hover:bg-gray-100 transition-colors duration-200">
                            <img src="${request.caller_signature}" 
                                alt="Caller Signature" 
                                class="w-full h-32 object-contain cursor-pointer hover:opacity-90 transition-opacity"
                                onclick="showImageModal('${request.caller_signature}')">
                        </div>
                    `;
                    } else {
                        callerSignatureContainer.innerHTML = `
                        <div class="border rounded-lg p-4 bg-gray-50 text-center">
                            <svg class="w-8 h-8 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <p class="text-gray-500 italic mt-2">No signature provided</p>
                        </div>
                    `;
                    }

                    // Signature meta
                    const verificationStatusEl = clone.querySelector('.verification-status');
                    const signatureTypeEl = clone.querySelector('.signature-type');
                    const signatureExtra = clone.querySelector('.signature-extra');
                    const signatureExtraLabel = clone.querySelector('.signature-extra-label');
                    const signatureExtraValue = clone.querySelector('.signature-extra-value');

                    const statusLabelMap = { pending: 'Pending', verified: 'Verified', disputed: 'Disputed' };
                    const typeLabelMap = { caller: 'Caller', delegate: 'Delegate', deferred: 'Deferred', none: 'None' };
                    const vStatus = (request.verification_status || 'pending');
                    const sType = (request.signature_type || 'none');
                    verificationStatusEl.textContent = statusLabelMap[vStatus] || vStatus;
                    signatureTypeEl.textContent = typeLabelMap[sType] || sType;

                    // Extra info depending on signature type
                    let extraLabel = '';
                    let extraValue = '';
                    if (sType === 'delegate') {
                        extraLabel = 'Delegate Name';
                        extraValue = request.delegate_name || '-';
                    } else if (sType === 'deferred') {
                        extraLabel = 'Signature Deadline';
                        extraValue = request.signature_deadline ? formatDate(request.signature_deadline) : '-';
                    } else if (sType === 'caller') {
                        extraLabel = 'Caller Signed At';
                        extraValue = request.caller_signed_at ? formatDate(request.caller_signed_at) : '-';
                    }
                    if (extraLabel) {
                        signatureExtraLabel.textContent = extraLabel;
                        signatureExtraValue.textContent = extraValue;
                        signatureExtra.classList.remove('hidden');
                    } else {
                        signatureExtra.classList.add('hidden');
                    }

                    // Photo evidence (before/after)
                    const beforeContainer = clone.querySelector('.before-photos-container');
                    const afterContainer = clone.querySelector('.after-photos-container');
                    const beforeEmpty = clone.querySelector('.before-empty');
                    const afterEmpty = clone.querySelector('.after-empty');

                    function renderPhotoGrid(arr, container, emptyEl) {
                        container.innerHTML = '';
                        if (Array.isArray(arr) && arr.length > 0) {
                            emptyEl.classList.add('hidden');
                            arr.forEach((p) => {
                                const src = buildImageUrl(p);
                                const col = document.createElement('div');
                                col.className = 'relative group';
                                col.innerHTML = `
                                    <img src="${src}" alt="Evidence Photo" class="w-full h-32 object-cover rounded-lg border border-gray-300 cursor-pointer hover:opacity-90" onclick="showImageModal('${src}')"/>
                                `;
                                container.appendChild(col);
                            });
                        } else {
                            emptyEl.classList.remove('hidden');
                        }
                    }

                    renderPhotoGrid(request.before_photos, beforeContainer, beforeEmpty);
                    renderPhotoGrid(request.after_photos, afterContainer, afterEmpty);

                    // Set evaluation
                    const evaluationContainer = clone.querySelector('.evaluation-container');
                    if (request.evaluation) {
                        const rating = request.evaluation.rating || 0;
                        const feedback = request.evaluation.feedback || '';
                        const isAnonymous = request.evaluation.is_anonymous || false;
                        const createdAt = request.evaluation.created_at ? formatDate(request.evaluation.created_at) : 'N/A';
                        
                        // Generate star rating HTML
                        let starsHtml = '<div class="flex items-center gap-1">';
                        for (let i = 1; i <= 5; i++) {
                            if (i <= rating) {
                                starsHtml += `
                                    <svg class="w-6 h-6 text-yellow-400 fill-current" viewBox="0 0 24 24">
                                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                    </svg>
                                `;
                            } else {
                                starsHtml += `
                                    <svg class="w-6 h-6 text-gray-300 fill-current" viewBox="0 0 24 24">
                                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                    </svg>
                                `;
                            }
                        }
                        starsHtml += '</div>';
                        
                        evaluationContainer.innerHTML = `
                            <div class="space-y-4">
                                <div class="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-3">
                                        <div>
                                            <p class="text-sm font-medium text-gray-700 mb-2">Rating</p>
                                            ${starsHtml}
                                        </div>
                                        <div class="text-right">
                                            <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 border border-yellow-300">
                                                ${rating} / 5 Stars
                                            </span>
                                        </div>
                                    </div>
                                    ${feedback ? `
                                        <div class="mt-4 pt-4 border-t border-yellow-200">
                                            <p class="text-sm font-medium text-gray-700 mb-2">Feedback</p>
                                            <p class="text-sm text-gray-900 bg-white rounded-lg p-3 border border-yellow-100">${feedback}</p>
                                        </div>
                                    ` : ''}
                                    <div class="mt-4 pt-4 border-t border-yellow-200 flex items-center justify-between text-xs text-gray-600">
                                        <div class="flex items-center gap-2">
                                            ${isAnonymous ? `
                                                <span class="inline-flex items-center px-2 py-1 rounded-full bg-gray-100 text-gray-700">
                                                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                                    </svg>
                                                    Anonymous
                                                </span>
                                            ` : ''}
                                        </div>
                                        <span class="text-gray-500">Submitted: ${createdAt}</span>
                                    </div>
                                </div>
                            </div>
                        `;
                    } else {
                        evaluationContainer.innerHTML = `
                            <div class="bg-gray-50 border border-gray-200 rounded-lg p-8 text-center">
                                <svg class="w-12 h-12 mx-auto text-gray-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                </svg>
                                <p class="text-gray-600 font-medium mb-1">No Evaluation Yet</p>
                                <p class="text-sm text-gray-500">The technician has not been evaluated for this repair request.</p>
                            </div>
                        `;
                    }

                    // Set repair history with tabs
                    const historyContainer = clone.querySelector('.repair-history-container');
                    if (request.histories && request.histories.length > 0) {
                        // Create tabs navigation
                        let tabsHtml = '<div class="border-b border-gray-200 mb-4"><nav class="flex flex-wrap gap-2" aria-label="Tabs">';
                        
                        request.histories.forEach((history, index) => {
                            const attemptLabel = `Repair ${history.attempt_number}`;
                            const statusColor = history.verification_status === 'approved' ? 'green' :
                                              history.verification_status === 'disputed' ? 'red' : 'gray';
                            const isActive = index === request.histories.length - 1; // Latest attempt is active by default
                            
                            tabsHtml += `
                                <button onclick="switchHistoryTab(event, 'history-${history.id}')" 
                                    class="history-tab ${isActive ? 'border-red-600 text-red-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} 
                                    whitespace-nowrap py-2 px-4 border-b-2 font-medium text-sm flex items-center gap-2">
                                    ${attemptLabel}
                                    <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-semibold bg-${statusColor}-100 text-${statusColor}-800">
                                        ${history.verification_status === 'approved' ? '✓' : history.verification_status === 'disputed' ? '↻' : '⋯'}
                                    </span>
                                </button>
                            `;
                        });
                        
                        tabsHtml += '</nav></div>';
                        
                        // Create tab content
                        let contentHtml = '<div class="history-tab-content">';
                        
                        request.histories.forEach((history, index) => {
                            const technicianName = history.technician ? history.technician.name : 'Unknown';
                            const statusColor = history.verification_status === 'approved' ? 'green' :
                                              history.verification_status === 'disputed' ? 'red' : 'gray';
                            const statusText = history.verification_status === 'approved' ? 'Approved' :
                                             history.verification_status === 'disputed' ? 'Rework Requested' : 'Pending Verification';
                            const isActive = index === request.histories.length - 1;
                            
                            contentHtml += `
                                <div id="history-${history.id}" class="history-tab-panel ${isActive ? '' : 'hidden'}">
                                    <div class="border border-gray-200 rounded-lg p-4 sm:p-6 bg-gradient-to-br from-white to-gray-50">
                                        <!-- Header -->
                                        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 pb-4 border-b border-gray-200">
                                            <div>
                                                <h4 class="text-lg font-bold text-gray-900 mb-2">Repair Attempt #${history.attempt_number}</h4>
                                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold bg-${statusColor}-100 text-${statusColor}-800 border border-${statusColor}-200">
                                                    ${statusText}
                                                </span>
                                            </div>
                                            <div class="text-sm text-gray-500 mt-2 sm:mt-0">
                                                ${formatDate(history.completed_at)}
                                            </div>
                                        </div>
                                        
                                        <!-- Technician Info -->
                                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                                            <div class="bg-white rounded-lg p-3 border border-gray-200">
                                                <p class="text-xs text-gray-500 mb-1">Technician</p>
                                                <p class="font-semibold text-gray-900">${technicianName}</p>
                                            </div>
                                            ${history.caller_signed_at ? `
                                                <div class="bg-white rounded-lg p-3 border border-gray-200">
                                                    <p class="text-xs text-gray-500 mb-1">Caller Signed</p>
                                                    <p class="font-semibold text-gray-900">${formatDate(history.caller_signed_at)}</p>
                                                </div>
                                            ` : ''}
                                        </div>
                                        
                                        <!-- Findings -->
                                        ${history.findings ? `
                                            <div class="bg-white rounded-lg p-4 border border-gray-200 mb-4">
                                                <p class="text-sm font-semibold text-gray-700 mb-2 flex items-center">
                                                    <svg class="w-4 h-4 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                                    </svg>
                                                    Findings
                                                </p>
                                                <p class="text-sm text-gray-900 whitespace-pre-wrap">${history.findings}</p>
                                            </div>
                                        ` : ''}
                                        
                                        <!-- Remarks -->
                                        ${history.remarks ? `
                                            <div class="bg-white rounded-lg p-4 border border-gray-200 mb-4">
                                                <p class="text-sm font-semibold text-gray-700 mb-2 flex items-center">
                                                    <svg class="w-4 h-4 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                                                    </svg>
                                                    Remarks
                                                </p>
                                                <p class="text-sm text-gray-900 whitespace-pre-wrap">${history.remarks}</p>
                                            </div>
                                        ` : ''}
                                        
                                        <!-- Caller Feedback (if rework requested) -->
                                        ${history.caller_feedback ? `
                                            <div class="bg-red-50 rounded-lg p-4 border border-red-200">
                                                <p class="text-sm font-semibold text-red-700 mb-2 flex items-center">
                                                    <svg class="w-4 h-4 mr-2 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                                    </svg>
                                                    Caller Feedback (Rework Reason)
                                                </p>
                                                <p class="text-sm text-red-900 whitespace-pre-wrap">${history.caller_feedback}</p>
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                            `;
                        });
                        
                        contentHtml += '</div>';
                        historyContainer.innerHTML = tabsHtml + contentHtml;
                    } else {
                        historyContainer.innerHTML = `
                            <div class="bg-gray-50 border border-gray-200 rounded-lg p-8 text-center">
                                <svg class="w-12 h-12 mx-auto text-gray-400 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <p class="text-gray-600 font-medium mb-1">No Repair History</p>
                                <p class="text-sm text-gray-500">This is the first repair attempt for this request.</p>
                            </div>
                        `;
                    }

                    // Show register asset button for unregistered assets, or show asset info if registered
                    const registerAssetContainer = clone.querySelector('.register-asset-container');
                    const registerAssetBtn = clone.querySelector('.register-asset-btn');
                    
                    if (!request.serial_number) {
                        // Asset not registered yet - show register button
                        registerAssetContainer.classList.remove('hidden');
                        // Set up the register asset button with pre-filled data
                        const registerUrl = new URL('{{ route("assets.create") }}', window.location.origin);
                        registerUrl.searchParams.set('equipment', request.equipment || '');
                        registerUrl.searchParams.set('location', request.location || '');
                        registerUrl.searchParams.set('category', request.category_id || '');
                        registerUrl.searchParams.set('findings', request.findings || '');
                        registerUrl.searchParams.set('remarks', request.remarks || '');
                        // Add non-registered asset context
                        registerUrl.searchParams.set('from_non_registered', '1');
                        
                        // Set asset status based on repair request status
                        let assetStatus = 'PULLED OUT'; // Default status
                        
                        // Normalize status for comparison (handle case variations and spaces)
                        const normalizedStatus = (request.status || '').toLowerCase().replace(/[_\s]/g, '');
                        
                        switch(normalizedStatus) {
                            case 'completed':
                                assetStatus = 'IN USE';
                                break;
                            case 'pulledout':
                                assetStatus = 'PULLED OUT';
                                break;
                            case 'cancelled':
                            case 'canceled':
                                assetStatus = 'IN USE'; // Assume it was working if cancelled
                                break;
                            case 'inprogress':
                            case 'ongoing':
                            case 'assigned':
                                assetStatus = 'UNDER REPAIR';
                                break;
                            case 'pending':
                            case 'open':
                            case 'new':
                                assetStatus = 'UNDER REPAIR';
                                break;
                            default:
                                assetStatus = 'PULLED OUT';
                        }
                        
                        registerUrl.searchParams.set('status', assetStatus);
                        // Add repair request ID for automatic linking
                        registerUrl.searchParams.set('repair_request_id', request.id || '');
                        registerUrl.searchParams.set('auto_link_repair', '1');
                        registerAssetBtn.href = registerUrl.toString();
                    } else {
                        // Asset is registered - show asset information
                        registerAssetContainer.classList.remove('hidden');
                        
                        registerAssetContainer.innerHTML = `
                            <p class="text-xs font-medium text-green-600 uppercase tracking-wide mb-3">Asset Registered & Linked</p>
                            <div class="bg-green-50 border border-green-200 rounded-lg p-3">
                                <div class="flex items-center text-green-800">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    <span class="font-medium">Asset has been registered and linked to this repair request</span>
                                </div>
                                <div class="mt-2 text-sm text-green-700">
                                    <p><strong>Serial Number:</strong> ${request.serial_number}</p>
                                    <p><strong>Asset Status:</strong> ${request.asset && request.asset.status ? request.asset.status : formatStatus(request.status)}</p>
                                    <p class="text-xs text-green-600 mt-1"><em>Current location is displayed above in the "Current Location (Asset)" section</em></p>
                                </div>
                            </div>
                        `;
                    }

                    content.innerHTML = '';
                    content.appendChild(clone);
                } else {
                    content.innerHTML = `
                    <div class="text-center py-12">
                        <div class="text-red-600 mb-4">
                            <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">Error Loading Details</h3>
                        <p class="text-gray-600">We couldn't retrieve the repair request information. Please try again later.</p>
                    </div>
                `;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                content.innerHTML = `
                <div class="text-center py-12">
                    <div class="text-red-600 mb-4">
                        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Network Error</h3>
                    <p class="text-gray-600">There was a problem connecting to the server. Please check your connection and try again.</p>
                </div>
            `;
            });
    }

    function showImageModal(imageUrl) {
        const modal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');
        if (!modal || !modalImage) return;

        modalImage.src = imageUrl;
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    function closeImageModal() {
        const modal = document.getElementById('imageModal');
        if (!modal) return;
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
        const modalImage = document.getElementById('modalImage');
        if (modalImage) {
            modalImage.src = '';
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        const imageModal = document.getElementById('imageModal');
        if (imageModal) {
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && !imageModal.classList.contains('hidden')) {
                    closeImageModal();
                }
            });

            imageModal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeImageModal();
                }
            });
        }
    });

    window.showImageModal = showImageModal;
    window.closeImageModal = closeImageModal;

    // Check if there's a success message (indicating asset was just registered)
    // and refresh the repair details to show the linked asset
    @if(session('success'))
    document.addEventListener('DOMContentLoaded', function() {
        // Get the repair ID from the URL
        const urlParts = window.location.pathname.split('/');
        const repairId = urlParts[urlParts.length - 1];
        
        if (repairId && !isNaN(repairId)) {
            // Small delay to ensure the success message is visible first
            setTimeout(function() {
                console.log('Refreshing repair details after successful asset registration');
                loadRepairDetails(repairId);
            }, 1000);
        }
    });
    @endif
</script>
@endsection